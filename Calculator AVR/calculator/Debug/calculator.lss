
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00001d86  00001e1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800082  00800082  00001e3c  2**0
                  ALLOC
  3 .stab         0000183c  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ce8  00000000  00000000  00003678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000044a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004610  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006259  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000082e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008aaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 0d 	call	0x1aee	; 0x1aee <main>
      8a:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPinDirection>:
#include <stdint.h>
#include "bit_math.h"
#include "Dio.h"

ERR_T DIO_SetPinDirection(PORT_T port, PIN_T pin, DIR_T dir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	ERR_T state = OK;
     b60:	19 82       	std	Y+1, r1	; 0x01
	if( pin <= PIN_7)
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <DIO_SetPinDirection+0x24>
     b68:	f4 c0       	rjmp	.+488    	; 0xd52 <DIO_SetPinDirection+0x20c>
	{
		if(dir == OUTPUT)
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	09 f0       	breq	.+2      	; 0xb72 <DIO_SetPinDirection+0x2c>
     b70:	72 c0       	rjmp	.+228    	; 0xc56 <DIO_SetPinDirection+0x110>
		{
			switch (port)
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	38 87       	std	Y+8, r19	; 0x08
     b7a:	2f 83       	std	Y+7, r18	; 0x07
     b7c:	8f 81       	ldd	r24, Y+7	; 0x07
     b7e:	98 85       	ldd	r25, Y+8	; 0x08
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	91 05       	cpc	r25, r1
     b84:	49 f1       	breq	.+82     	; 0xbd8 <DIO_SetPinDirection+0x92>
     b86:	2f 81       	ldd	r18, Y+7	; 0x07
     b88:	38 85       	ldd	r19, Y+8	; 0x08
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	2c f4       	brge	.+10     	; 0xb9a <DIO_SetPinDirection+0x54>
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	61 f0       	breq	.+24     	; 0xbb0 <DIO_SetPinDirection+0x6a>
     b98:	5b c0       	rjmp	.+182    	; 0xc50 <DIO_SetPinDirection+0x10a>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	71 f1       	breq	.+92     	; 0xc00 <DIO_SetPinDirection+0xba>
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	91 05       	cpc	r25, r1
     bac:	e9 f1       	breq	.+122    	; 0xc28 <DIO_SetPinDirection+0xe2>
     bae:	50 c0       	rjmp	.+160    	; 0xc50 <DIO_SetPinDirection+0x10a>
			{
				case PORT_A:
					SET_BIT(DDRA,pin);
     bb0:	aa e3       	ldi	r26, 0x3A	; 58
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e3       	ldi	r30, 0x3A	; 58
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_SetPinDirection+0x88>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_SetPinDirection+0x84>
     bd2:	84 2b       	or	r24, r20
     bd4:	8c 93       	st	X, r24
     bd6:	bf c0       	rjmp	.+382    	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
				case PORT_B:
					SET_BIT(DDRB,pin);
     bd8:	a7 e3       	ldi	r26, 0x37	; 55
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e7 e3       	ldi	r30, 0x37	; 55
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	48 2f       	mov	r20, r24
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 2e       	mov	r0, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_SetPinDirection+0xb0>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_SetPinDirection+0xac>
     bfa:	84 2b       	or	r24, r20
     bfc:	8c 93       	st	X, r24
     bfe:	ab c0       	rjmp	.+342    	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
				case PORT_C:
					SET_BIT(DDRC,pin);
     c00:	a4 e3       	ldi	r26, 0x34	; 52
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e4 e3       	ldi	r30, 0x34	; 52
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	48 2f       	mov	r20, r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 2e       	mov	r0, r18
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <DIO_SetPinDirection+0xd8>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <DIO_SetPinDirection+0xd4>
     c22:	84 2b       	or	r24, r20
     c24:	8c 93       	st	X, r24
     c26:	97 c0       	rjmp	.+302    	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
				case PORT_D:
					SET_BIT(DDRD,pin);
     c28:	a1 e3       	ldi	r26, 0x31	; 49
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e1 e3       	ldi	r30, 0x31	; 49
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 2e       	mov	r0, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_SetPinDirection+0x100>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_SetPinDirection+0xfc>
     c4a:	84 2b       	or	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	83 c0       	rjmp	.+262    	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
				default:
					state = NOK;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	80 c0       	rjmp	.+256    	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
			}
		}
		else if(dir == INPUT)
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	88 23       	and	r24, r24
     c5a:	09 f0       	breq	.+2      	; 0xc5e <DIO_SetPinDirection+0x118>
     c5c:	77 c0       	rjmp	.+238    	; 0xd4c <DIO_SetPinDirection+0x206>
		{
			switch (port)
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	3e 83       	std	Y+6, r19	; 0x06
     c66:	2d 83       	std	Y+5, r18	; 0x05
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 05       	cpc	r25, r1
     c70:	59 f1       	breq	.+86     	; 0xcc8 <DIO_SetPinDirection+0x182>
     c72:	2d 81       	ldd	r18, Y+5	; 0x05
     c74:	3e 81       	ldd	r19, Y+6	; 0x06
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	2c f4       	brge	.+10     	; 0xc86 <DIO_SetPinDirection+0x140>
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	69 f0       	breq	.+26     	; 0xc9e <DIO_SetPinDirection+0x158>
     c84:	60 c0       	rjmp	.+192    	; 0xd46 <DIO_SetPinDirection+0x200>
     c86:	2d 81       	ldd	r18, Y+5	; 0x05
     c88:	3e 81       	ldd	r19, Y+6	; 0x06
     c8a:	22 30       	cpi	r18, 0x02	; 2
     c8c:	31 05       	cpc	r19, r1
     c8e:	89 f1       	breq	.+98     	; 0xcf2 <DIO_SetPinDirection+0x1ac>
     c90:	8d 81       	ldd	r24, Y+5	; 0x05
     c92:	9e 81       	ldd	r25, Y+6	; 0x06
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	91 05       	cpc	r25, r1
     c98:	09 f4       	brne	.+2      	; 0xc9c <DIO_SetPinDirection+0x156>
     c9a:	40 c0       	rjmp	.+128    	; 0xd1c <DIO_SetPinDirection+0x1d6>
     c9c:	54 c0       	rjmp	.+168    	; 0xd46 <DIO_SetPinDirection+0x200>
			{
				case PORT_A:
					CLR_BIT(DDRA,pin);
     c9e:	aa e3       	ldi	r26, 0x3A	; 58
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	ea e3       	ldi	r30, 0x3A	; 58
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_SetPinDirection+0x176>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_SetPinDirection+0x172>
     cc0:	80 95       	com	r24
     cc2:	84 23       	and	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	47 c0       	rjmp	.+142    	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
				case PORT_B:
					CLR_BIT(DDRB,pin);
     cc8:	a7 e3       	ldi	r26, 0x37	; 55
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e7 e3       	ldi	r30, 0x37	; 55
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_SetPinDirection+0x1a0>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_SetPinDirection+0x19c>
     cea:	80 95       	com	r24
     cec:	84 23       	and	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	32 c0       	rjmp	.+100    	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
				case PORT_C:
					CLR_BIT(DDRC,pin);
     cf2:	a4 e3       	ldi	r26, 0x34	; 52
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e3       	ldi	r30, 0x34	; 52
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_SetPinDirection+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_SetPinDirection+0x1c6>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	1d c0       	rjmp	.+58     	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
				case PORT_D:
					CLR_BIT(DDRD,pin);
     d1c:	a1 e3       	ldi	r26, 0x31	; 49
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e1 e3       	ldi	r30, 0x31	; 49
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_SetPinDirection+0x1f4>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_SetPinDirection+0x1f0>
     d3e:	80 95       	com	r24
     d40:	84 23       	and	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
				default:
					state = NOK;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <DIO_SetPinDirection+0x210>
					break;
			}
		}
		else
		{
			state = NOK;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_SetPinDirection+0x210>
		}
	}
	else
	{
		state = NOK;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
     d56:	89 81       	ldd	r24, Y+1	; 0x01
}
     d58:	28 96       	adiw	r28, 0x08	; 8
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <DIO_SetPinValue>:

ERR_T DIO_SetPinValue(PORT_T port, PIN_T pin, VAL_T val)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	28 97       	sbiw	r28, 0x08	; 8
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	6b 83       	std	Y+3, r22	; 0x03
     d82:	4c 83       	std	Y+4, r20	; 0x04
	ERR_T state = OK;
     d84:	19 82       	std	Y+1, r1	; 0x01
	if( pin <= PIN_7)
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	08 f0       	brcs	.+2      	; 0xd8e <DIO_SetPinValue+0x24>
     d8c:	f4 c0       	rjmp	.+488    	; 0xf76 <DIO_SetPinValue+0x20c>
	{
		if(val == HIGH)
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	09 f0       	breq	.+2      	; 0xd96 <DIO_SetPinValue+0x2c>
     d94:	72 c0       	rjmp	.+228    	; 0xe7a <DIO_SetPinValue+0x110>
		{
			switch (port)
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	38 87       	std	Y+8, r19	; 0x08
     d9e:	2f 83       	std	Y+7, r18	; 0x07
     da0:	8f 81       	ldd	r24, Y+7	; 0x07
     da2:	98 85       	ldd	r25, Y+8	; 0x08
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	49 f1       	breq	.+82     	; 0xdfc <DIO_SetPinValue+0x92>
     daa:	2f 81       	ldd	r18, Y+7	; 0x07
     dac:	38 85       	ldd	r19, Y+8	; 0x08
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <DIO_SetPinValue+0x54>
     db4:	8f 81       	ldd	r24, Y+7	; 0x07
     db6:	98 85       	ldd	r25, Y+8	; 0x08
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	61 f0       	breq	.+24     	; 0xdd4 <DIO_SetPinValue+0x6a>
     dbc:	5b c0       	rjmp	.+182    	; 0xe74 <DIO_SetPinValue+0x10a>
     dbe:	2f 81       	ldd	r18, Y+7	; 0x07
     dc0:	38 85       	ldd	r19, Y+8	; 0x08
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	71 f1       	breq	.+92     	; 0xe24 <DIO_SetPinValue+0xba>
     dc8:	8f 81       	ldd	r24, Y+7	; 0x07
     dca:	98 85       	ldd	r25, Y+8	; 0x08
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	e9 f1       	breq	.+122    	; 0xe4c <DIO_SetPinValue+0xe2>
     dd2:	50 c0       	rjmp	.+160    	; 0xe74 <DIO_SetPinValue+0x10a>
			{
				case PORT_A:
					SET_BIT(PORTA,pin);
     dd4:	ab e3       	ldi	r26, 0x3B	; 59
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	eb e3       	ldi	r30, 0x3B	; 59
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_SetPinValue+0x88>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_SetPinValue+0x84>
     df6:	84 2b       	or	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	bf c0       	rjmp	.+382    	; 0xf7a <DIO_SetPinValue+0x210>
					break;
				case PORT_B:
					SET_BIT(PORTB,pin);
     dfc:	a8 e3       	ldi	r26, 0x38	; 56
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e8 e3       	ldi	r30, 0x38	; 56
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_SetPinValue+0xb0>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_SetPinValue+0xac>
     e1e:	84 2b       	or	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	ab c0       	rjmp	.+342    	; 0xf7a <DIO_SetPinValue+0x210>
					break;
				case PORT_C:
					SET_BIT(PORTC,pin);
     e24:	a5 e3       	ldi	r26, 0x35	; 53
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e5 e3       	ldi	r30, 0x35	; 53
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_SetPinValue+0xd8>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_SetPinValue+0xd4>
     e46:	84 2b       	or	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	97 c0       	rjmp	.+302    	; 0xf7a <DIO_SetPinValue+0x210>
					break;
				case PORT_D:
					SET_BIT(PORTD,pin);
     e4c:	a2 e3       	ldi	r26, 0x32	; 50
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e2 e3       	ldi	r30, 0x32	; 50
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_SetPinValue+0x100>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_SetPinValue+0xfc>
     e6e:	84 2b       	or	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	83 c0       	rjmp	.+262    	; 0xf7a <DIO_SetPinValue+0x210>
					break;
				default:
					state = NOK;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	80 c0       	rjmp	.+256    	; 0xf7a <DIO_SetPinValue+0x210>
					break;
			}
		}
		else if(val == LOW)
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	88 23       	and	r24, r24
     e7e:	09 f0       	breq	.+2      	; 0xe82 <DIO_SetPinValue+0x118>
     e80:	77 c0       	rjmp	.+238    	; 0xf70 <DIO_SetPinValue+0x206>
		{
			switch (port)
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	3e 83       	std	Y+6, r19	; 0x06
     e8a:	2d 83       	std	Y+5, r18	; 0x05
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	91 05       	cpc	r25, r1
     e94:	59 f1       	breq	.+86     	; 0xeec <DIO_SetPinValue+0x182>
     e96:	2d 81       	ldd	r18, Y+5	; 0x05
     e98:	3e 81       	ldd	r19, Y+6	; 0x06
     e9a:	22 30       	cpi	r18, 0x02	; 2
     e9c:	31 05       	cpc	r19, r1
     e9e:	2c f4       	brge	.+10     	; 0xeaa <DIO_SetPinValue+0x140>
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	69 f0       	breq	.+26     	; 0xec2 <DIO_SetPinValue+0x158>
     ea8:	60 c0       	rjmp	.+192    	; 0xf6a <DIO_SetPinValue+0x200>
     eaa:	2d 81       	ldd	r18, Y+5	; 0x05
     eac:	3e 81       	ldd	r19, Y+6	; 0x06
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	89 f1       	breq	.+98     	; 0xf16 <DIO_SetPinValue+0x1ac>
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	91 05       	cpc	r25, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <DIO_SetPinValue+0x156>
     ebe:	40 c0       	rjmp	.+128    	; 0xf40 <DIO_SetPinValue+0x1d6>
     ec0:	54 c0       	rjmp	.+168    	; 0xf6a <DIO_SetPinValue+0x200>
			{
				case PORT_A:
					CLR_BIT(PORTA,pin);
     ec2:	ab e3       	ldi	r26, 0x3B	; 59
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	eb e3       	ldi	r30, 0x3B	; 59
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_SetPinValue+0x176>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_SetPinValue+0x172>
     ee4:	80 95       	com	r24
     ee6:	84 23       	and	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	47 c0       	rjmp	.+142    	; 0xf7a <DIO_SetPinValue+0x210>
					break;
				case PORT_B:
					CLR_BIT(PORTB,pin);
     eec:	a8 e3       	ldi	r26, 0x38	; 56
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e8 e3       	ldi	r30, 0x38	; 56
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_SetPinValue+0x1a0>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_SetPinValue+0x19c>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	32 c0       	rjmp	.+100    	; 0xf7a <DIO_SetPinValue+0x210>
					break;
				case PORT_C:
					CLR_BIT(PORTC,pin);
     f16:	a5 e3       	ldi	r26, 0x35	; 53
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e5 e3       	ldi	r30, 0x35	; 53
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_SetPinValue+0x1ca>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_SetPinValue+0x1c6>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	1d c0       	rjmp	.+58     	; 0xf7a <DIO_SetPinValue+0x210>
					break;
				case PORT_D:
					CLR_BIT(PORTD,pin);
     f40:	a2 e3       	ldi	r26, 0x32	; 50
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e2 e3       	ldi	r30, 0x32	; 50
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_SetPinValue+0x1f4>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_SetPinValue+0x1f0>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	08 c0       	rjmp	.+16     	; 0xf7a <DIO_SetPinValue+0x210>
					break;
				default:
					state = NOK;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	05 c0       	rjmp	.+10     	; 0xf7a <DIO_SetPinValue+0x210>
					break;
			}
		}
		else
		{
			state = NOK;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_SetPinValue+0x210>
		}
	}
	else
	{
		state = NOK;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7c:	28 96       	adiw	r28, 0x08	; 8
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <DIO_GetPinValue>:

ERR_T DIO_GetPinValue(PORT_T port, PIN_T pin, uint8_t * val)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	27 97       	sbiw	r28, 0x07	; 7
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	8a 83       	std	Y+2, r24	; 0x02
     fa4:	6b 83       	std	Y+3, r22	; 0x03
     fa6:	5d 83       	std	Y+5, r21	; 0x05
     fa8:	4c 83       	std	Y+4, r20	; 0x04
	ERR_T state = OK;
     faa:	19 82       	std	Y+1, r1	; 0x01
	if( pin <= PIN_7)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	08 f0       	brcs	.+2      	; 0xfb4 <DIO_GetPinValue+0x26>
     fb2:	74 c0       	rjmp	.+232    	; 0x109c <DIO_GetPinValue+0x10e>
	{
		switch (port)
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	3f 83       	std	Y+7, r19	; 0x07
     fbc:	2e 83       	std	Y+6, r18	; 0x06
     fbe:	4e 81       	ldd	r20, Y+6	; 0x06
     fc0:	5f 81       	ldd	r21, Y+7	; 0x07
     fc2:	41 30       	cpi	r20, 0x01	; 1
     fc4:	51 05       	cpc	r21, r1
     fc6:	59 f1       	breq	.+86     	; 0x101e <DIO_GetPinValue+0x90>
     fc8:	8e 81       	ldd	r24, Y+6	; 0x06
     fca:	9f 81       	ldd	r25, Y+7	; 0x07
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	91 05       	cpc	r25, r1
     fd0:	34 f4       	brge	.+12     	; 0xfde <DIO_GetPinValue+0x50>
     fd2:	2e 81       	ldd	r18, Y+6	; 0x06
     fd4:	3f 81       	ldd	r19, Y+7	; 0x07
     fd6:	21 15       	cp	r18, r1
     fd8:	31 05       	cpc	r19, r1
     fda:	69 f0       	breq	.+26     	; 0xff6 <DIO_GetPinValue+0x68>
     fdc:	5c c0       	rjmp	.+184    	; 0x1096 <DIO_GetPinValue+0x108>
     fde:	4e 81       	ldd	r20, Y+6	; 0x06
     fe0:	5f 81       	ldd	r21, Y+7	; 0x07
     fe2:	42 30       	cpi	r20, 0x02	; 2
     fe4:	51 05       	cpc	r21, r1
     fe6:	79 f1       	breq	.+94     	; 0x1046 <DIO_GetPinValue+0xb8>
     fe8:	8e 81       	ldd	r24, Y+6	; 0x06
     fea:	9f 81       	ldd	r25, Y+7	; 0x07
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_GetPinValue+0x66>
     ff2:	3d c0       	rjmp	.+122    	; 0x106e <DIO_GetPinValue+0xe0>
     ff4:	50 c0       	rjmp	.+160    	; 0x1096 <DIO_GetPinValue+0x108>
		{
			case PORT_A:
				*val = GET_BIT(PINA,pin);
     ff6:	e9 e3       	ldi	r30, 0x39	; 57
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a9 01       	movw	r20, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_GetPinValue+0x80>
    100a:	55 95       	asr	r21
    100c:	47 95       	ror	r20
    100e:	8a 95       	dec	r24
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_GetPinValue+0x7c>
    1012:	ca 01       	movw	r24, r20
    1014:	81 70       	andi	r24, 0x01	; 1
    1016:	ec 81       	ldd	r30, Y+4	; 0x04
    1018:	fd 81       	ldd	r31, Y+5	; 0x05
    101a:	80 83       	st	Z, r24
    101c:	41 c0       	rjmp	.+130    	; 0x10a0 <DIO_GetPinValue+0x112>
				break;
			case PORT_B:
				*val = GET_BIT(PINB,pin);
    101e:	e6 e3       	ldi	r30, 0x36	; 54
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_GetPinValue+0xa8>
    1032:	55 95       	asr	r21
    1034:	47 95       	ror	r20
    1036:	8a 95       	dec	r24
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_GetPinValue+0xa4>
    103a:	ca 01       	movw	r24, r20
    103c:	81 70       	andi	r24, 0x01	; 1
    103e:	ec 81       	ldd	r30, Y+4	; 0x04
    1040:	fd 81       	ldd	r31, Y+5	; 0x05
    1042:	80 83       	st	Z, r24
    1044:	2d c0       	rjmp	.+90     	; 0x10a0 <DIO_GetPinValue+0x112>
				break;
			case PORT_C:
				*val = GET_BIT(PINC,pin);
    1046:	e3 e3       	ldi	r30, 0x33	; 51
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a9 01       	movw	r20, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_GetPinValue+0xd0>
    105a:	55 95       	asr	r21
    105c:	47 95       	ror	r20
    105e:	8a 95       	dec	r24
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_GetPinValue+0xcc>
    1062:	ca 01       	movw	r24, r20
    1064:	81 70       	andi	r24, 0x01	; 1
    1066:	ec 81       	ldd	r30, Y+4	; 0x04
    1068:	fd 81       	ldd	r31, Y+5	; 0x05
    106a:	80 83       	st	Z, r24
    106c:	19 c0       	rjmp	.+50     	; 0x10a0 <DIO_GetPinValue+0x112>
				break;
			case PORT_D:
				*val = GET_BIT(PIND,pin);
    106e:	e0 e3       	ldi	r30, 0x30	; 48
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a9 01       	movw	r20, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_GetPinValue+0xf8>
    1082:	55 95       	asr	r21
    1084:	47 95       	ror	r20
    1086:	8a 95       	dec	r24
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_GetPinValue+0xf4>
    108a:	ca 01       	movw	r24, r20
    108c:	81 70       	andi	r24, 0x01	; 1
    108e:	ec 81       	ldd	r30, Y+4	; 0x04
    1090:	fd 81       	ldd	r31, Y+5	; 0x05
    1092:	80 83       	st	Z, r24
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <DIO_GetPinValue+0x112>
				break;
			default:
				state = NOK;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_GetPinValue+0x112>
				break;
		}
	}
	else
	{
		state = NOK;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a2:	27 96       	adiw	r28, 0x07	; 7
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <DIO_SetPortDirection>:

ERR_T DIO_SetPortDirection(PORT_T port, uint8_t dir)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <DIO_SetPortDirection+0x6>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <DIO_SetPortDirection+0x8>
    10bc:	0f 92       	push	r0
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	6b 83       	std	Y+3, r22	; 0x03
	ERR_T state = OK;
    10c6:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3d 83       	std	Y+5, r19	; 0x05
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	d1 f0       	breq	.+52     	; 0x1110 <DIO_SetPortDirection+0x5c>
    10dc:	2c 81       	ldd	r18, Y+4	; 0x04
    10de:	3d 81       	ldd	r19, Y+5	; 0x05
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <DIO_SetPortDirection+0x3c>
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	61 f0       	breq	.+24     	; 0x1106 <DIO_SetPortDirection+0x52>
    10ee:	1f c0       	rjmp	.+62     	; 0x112e <DIO_SetPortDirection+0x7a>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	81 f0       	breq	.+32     	; 0x111a <DIO_SetPortDirection+0x66>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	91 05       	cpc	r25, r1
    1102:	81 f0       	breq	.+32     	; 0x1124 <DIO_SetPortDirection+0x70>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <DIO_SetPortDirection+0x7a>
	{
	case PORT_A: DDRA = dir; break;
    1106:	ea e3       	ldi	r30, 0x3A	; 58
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	80 83       	st	Z, r24
    110e:	11 c0       	rjmp	.+34     	; 0x1132 <DIO_SetPortDirection+0x7e>
	case PORT_B: DDRB = dir; break;
    1110:	e7 e3       	ldi	r30, 0x37	; 55
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	80 83       	st	Z, r24
    1118:	0c c0       	rjmp	.+24     	; 0x1132 <DIO_SetPortDirection+0x7e>
	case PORT_C: DDRC = dir; break;
    111a:	e4 e3       	ldi	r30, 0x34	; 52
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	80 83       	st	Z, r24
    1122:	07 c0       	rjmp	.+14     	; 0x1132 <DIO_SetPortDirection+0x7e>
	case PORT_D: DDRD = dir; break;
    1124:	e1 e3       	ldi	r30, 0x31	; 49
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	80 83       	st	Z, r24
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_SetPortDirection+0x7e>
	default: state = NOK;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    1132:	89 81       	ldd	r24, Y+1	; 0x01
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <DIO_SetPortValue>:

ERR_T DIO_SetPortValue(PORT_T port, uint8_t val)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_SetPortValue+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_SetPortValue+0x8>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	8a 83       	std	Y+2, r24	; 0x02
    1154:	6b 83       	std	Y+3, r22	; 0x03
	ERR_T state = OK;
    1156:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3d 83       	std	Y+5, r19	; 0x05
    1160:	2c 83       	std	Y+4, r18	; 0x04
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	91 05       	cpc	r25, r1
    116a:	d1 f0       	breq	.+52     	; 0x11a0 <DIO_SetPortValue+0x5c>
    116c:	2c 81       	ldd	r18, Y+4	; 0x04
    116e:	3d 81       	ldd	r19, Y+5	; 0x05
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	2c f4       	brge	.+10     	; 0x1180 <DIO_SetPortValue+0x3c>
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	61 f0       	breq	.+24     	; 0x1196 <DIO_SetPortValue+0x52>
    117e:	1f c0       	rjmp	.+62     	; 0x11be <DIO_SetPortValue+0x7a>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <DIO_SetPortValue+0x66>
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	91 05       	cpc	r25, r1
    1192:	81 f0       	breq	.+32     	; 0x11b4 <DIO_SetPortValue+0x70>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <DIO_SetPortValue+0x7a>
	{
	case PORT_A: PORTA = val; break;
    1196:	eb e3       	ldi	r30, 0x3B	; 59
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	80 83       	st	Z, r24
    119e:	11 c0       	rjmp	.+34     	; 0x11c2 <DIO_SetPortValue+0x7e>
	case PORT_B: PORTB = val; break;
    11a0:	e8 e3       	ldi	r30, 0x38	; 56
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	80 83       	st	Z, r24
    11a8:	0c c0       	rjmp	.+24     	; 0x11c2 <DIO_SetPortValue+0x7e>
	case PORT_C: PORTC = val; break;
    11aa:	e5 e3       	ldi	r30, 0x35	; 53
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	80 83       	st	Z, r24
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <DIO_SetPortValue+0x7e>
	case PORT_D: PORTD = val; break;
    11b4:	e2 e3       	ldi	r30, 0x32	; 50
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	80 83       	st	Z, r24
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_SetPortValue+0x7e>
	default: state = NOK;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <DIO_GetPortValue>:

ERR_T DIO_GetPortValue(PORT_T port, uint8_t * val)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <DIO_GetPortValue+0x6>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_GetPortValue+0x8>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_GetPortValue+0xa>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	8a 83       	std	Y+2, r24	; 0x02
    11e4:	7c 83       	std	Y+4, r23	; 0x04
    11e6:	6b 83       	std	Y+3, r22	; 0x03
	ERR_T state = OK;
    11e8:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	3e 83       	std	Y+6, r19	; 0x06
    11f2:	2d 83       	std	Y+5, r18	; 0x05
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	e1 f0       	breq	.+56     	; 0x1236 <DIO_GetPortValue+0x62>
    11fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1200:	3e 81       	ldd	r19, Y+6	; 0x06
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	2c f4       	brge	.+10     	; 0x1212 <DIO_GetPortValue+0x3e>
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	61 f0       	breq	.+24     	; 0x1228 <DIO_GetPortValue+0x54>
    1210:	27 c0       	rjmp	.+78     	; 0x1260 <DIO_GetPortValue+0x8c>
    1212:	2d 81       	ldd	r18, Y+5	; 0x05
    1214:	3e 81       	ldd	r19, Y+6	; 0x06
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	a1 f0       	breq	.+40     	; 0x1244 <DIO_GetPortValue+0x70>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	91 05       	cpc	r25, r1
    1224:	b1 f0       	breq	.+44     	; 0x1252 <DIO_GetPortValue+0x7e>
    1226:	1c c0       	rjmp	.+56     	; 0x1260 <DIO_GetPortValue+0x8c>
	{
	case PORT_A: *val = PINA; break;
    1228:	e9 e3       	ldi	r30, 0x39	; 57
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	eb 81       	ldd	r30, Y+3	; 0x03
    1230:	fc 81       	ldd	r31, Y+4	; 0x04
    1232:	80 83       	st	Z, r24
    1234:	17 c0       	rjmp	.+46     	; 0x1264 <DIO_GetPortValue+0x90>
	case PORT_B: *val = PINB; break;
    1236:	e6 e3       	ldi	r30, 0x36	; 54
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	eb 81       	ldd	r30, Y+3	; 0x03
    123e:	fc 81       	ldd	r31, Y+4	; 0x04
    1240:	80 83       	st	Z, r24
    1242:	10 c0       	rjmp	.+32     	; 0x1264 <DIO_GetPortValue+0x90>
	case PORT_C: *val = PINC; break;
    1244:	e3 e3       	ldi	r30, 0x33	; 51
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	eb 81       	ldd	r30, Y+3	; 0x03
    124c:	fc 81       	ldd	r31, Y+4	; 0x04
    124e:	80 83       	st	Z, r24
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <DIO_GetPortValue+0x90>
	case PORT_D: *val = PIND; break;
    1252:	e0 e3       	ldi	r30, 0x30	; 48
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	eb 81       	ldd	r30, Y+3	; 0x03
    125a:	fc 81       	ldd	r31, Y+4	; 0x04
    125c:	80 83       	st	Z, r24
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_GetPortValue+0x90>
	default: state = NOK;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    1264:	89 81       	ldd	r24, Y+1	; 0x01
}
    1266:	26 96       	adiw	r28, 0x06	; 6
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <DIO_EnablePullup>:

ERR_T DIO_EnablePullup(PORT_T port , PIN_T pin )
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <DIO_EnablePullup+0x6>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <DIO_EnablePullup+0x8>
    1280:	0f 92       	push	r0
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	6b 83       	std	Y+3, r22	; 0x03
	ERR_T state = OK;
    128a:	19 82       	std	Y+1, r1	; 0x01
	if(pin <= PIN_7)
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	88 30       	cpi	r24, 0x08	; 8
    1290:	08 f0       	brcs	.+2      	; 0x1294 <DIO_EnablePullup+0x1c>
    1292:	72 c0       	rjmp	.+228    	; 0x1378 <DIO_EnablePullup+0x100>
	{
		switch (port)
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	3d 83       	std	Y+5, r19	; 0x05
    129c:	2c 83       	std	Y+4, r18	; 0x04
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	9d 81       	ldd	r25, Y+5	; 0x05
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 05       	cpc	r25, r1
    12a6:	49 f1       	breq	.+82     	; 0x12fa <DIO_EnablePullup+0x82>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <DIO_EnablePullup+0x44>
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9d 81       	ldd	r25, Y+5	; 0x05
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_EnablePullup+0x5a>
    12ba:	5b c0       	rjmp	.+182    	; 0x1372 <DIO_EnablePullup+0xfa>
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	71 f1       	breq	.+92     	; 0x1322 <DIO_EnablePullup+0xaa>
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	e9 f1       	breq	.+122    	; 0x134a <DIO_EnablePullup+0xd2>
    12d0:	50 c0       	rjmp	.+160    	; 0x1372 <DIO_EnablePullup+0xfa>
		{
		case PORT_A: SET_BIT(PORTA,pin); break;
    12d2:	ab e3       	ldi	r26, 0x3B	; 59
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	eb e3       	ldi	r30, 0x3B	; 59
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_EnablePullup+0x78>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_EnablePullup+0x74>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	41 c0       	rjmp	.+130    	; 0x137c <DIO_EnablePullup+0x104>
		case PORT_B: SET_BIT(PORTB,pin); break;
    12fa:	a8 e3       	ldi	r26, 0x38	; 56
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_EnablePullup+0xa0>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_EnablePullup+0x9c>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	2d c0       	rjmp	.+90     	; 0x137c <DIO_EnablePullup+0x104>
		case PORT_C: SET_BIT(PORTC,pin); break;
    1322:	a5 e3       	ldi	r26, 0x35	; 53
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e5 e3       	ldi	r30, 0x35	; 53
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_EnablePullup+0xc8>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_EnablePullup+0xc4>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	19 c0       	rjmp	.+50     	; 0x137c <DIO_EnablePullup+0x104>
		case PORT_D: SET_BIT(PORTD,pin); break;
    134a:	a2 e3       	ldi	r26, 0x32	; 50
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e2 e3       	ldi	r30, 0x32	; 50
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_EnablePullup+0xf0>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_EnablePullup+0xec>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	05 c0       	rjmp	.+10     	; 0x137c <DIO_EnablePullup+0x104>
		default: state = NOK; break;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_EnablePullup+0x104>

		}
	}
	else
	{
		state = NOK;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <KPAD_Init>:

uint8_t col_arr[4] = {KPAD_COL_PIN0,KPAD_COL_PIN1,KPAD_COL_PIN2,KPAD_COL_PIN3};
uint8_t row_arr[4] = {KPAD_ROW_PIN0,KPAD_ROW_PIN1,KPAD_ROW_PIN2,KPAD_ROW_PIN3};

void KPAD_Init()
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	// col output
	// col high
	// row input
	// enable internal pull up
	for(uint8_t i=0 ; i<4 ; i++)
    1398:	19 82       	std	Y+1, r1	; 0x01
    139a:	32 c0       	rjmp	.+100    	; 0x1400 <KPAD_Init+0x72>
	{
		DIO_SetPinDirection(KPAD_COL_PORT, col_arr[i], OUTPUT);
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	fc 01       	movw	r30, r24
    13a4:	e8 58       	subi	r30, 0x88	; 136
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	90 81       	ld	r25, Z
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	69 2f       	mov	r22, r25
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
		DIO_SetPinValue(KPAD_COL_PORT, col_arr[i], HIGH);
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	fc 01       	movw	r30, r24
    13bc:	e8 58       	subi	r30, 0x88	; 136
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	90 81       	ld	r25, Z
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	69 2f       	mov	r22, r25
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>

		DIO_SetPinDirection(KPAD_ROW_PORT, row_arr[i], INPUT);
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	fc 01       	movw	r30, r24
    13d4:	e4 58       	subi	r30, 0x84	; 132
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	90 81       	ld	r25, Z
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	69 2f       	mov	r22, r25
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
		DIO_EnablePullup(KPAD_ROW_PORT,row_arr[i]);
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	fc 01       	movw	r30, r24
    13ec:	e4 58       	subi	r30, 0x84	; 132
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	90 81       	ld	r25, Z
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	69 2f       	mov	r22, r25
    13f6:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_EnablePullup>
{
	// col output
	// col high
	// row input
	// enable internal pull up
	for(uint8_t i=0 ; i<4 ; i++)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	84 30       	cpi	r24, 0x04	; 4
    1404:	58 f2       	brcs	.-106    	; 0x139c <KPAD_Init+0xe>
		DIO_SetPinValue(KPAD_COL_PORT, col_arr[i], HIGH);

		DIO_SetPinDirection(KPAD_ROW_PORT, row_arr[i], INPUT);
		DIO_EnablePullup(KPAD_ROW_PORT,row_arr[i]);
	}
}
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <KPAD_GetKeyPressed>:

uint8_t KPAD_GetKeyPressed(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	62 97       	sbiw	r28, 0x12	; 18
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
	uint8_t res = 0xff;
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	89 8b       	std	Y+17, r24	; 0x11
	for(uint8_t i = 0 ; i<4 ; i++)
    1426:	18 8a       	std	Y+16, r1	; 0x10
    1428:	bc c0       	rjmp	.+376    	; 0x15a2 <KPAD_GetKeyPressed+0x194>
	{
		DIO_SetPinValue(KPAD_COL_PORT, col_arr[i], LOW);
    142a:	88 89       	ldd	r24, Y+16	; 0x10
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	fc 01       	movw	r30, r24
    1432:	e8 58       	subi	r30, 0x88	; 136
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	90 81       	ld	r25, Z
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	69 2f       	mov	r22, r25
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>
		for(uint8_t j = 0 ; j< 4 ; j++)
    1442:	1f 86       	std	Y+15, r1	; 0x0f
    1444:	9b c0       	rjmp	.+310    	; 0x157c <KPAD_GetKeyPressed+0x16e>
		{
			uint8_t btn = NULL;
    1446:	1a 8a       	std	Y+18, r1	; 0x12
//			read value ?
			DIO_GetPinValue(KPAD_ROW_PORT, row_arr[j], &btn);
    1448:	8f 85       	ldd	r24, Y+15	; 0x0f
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	fc 01       	movw	r30, r24
    1450:	e4 58       	subi	r30, 0x84	; 132
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	90 81       	ld	r25, Z
    1456:	9e 01       	movw	r18, r28
    1458:	2e 5e       	subi	r18, 0xEE	; 238
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	69 2f       	mov	r22, r25
    1460:	a9 01       	movw	r20, r18
    1462:	0e 94 c7 07 	call	0xf8e	; 0xf8e <DIO_GetPinValue>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a0 ea       	ldi	r26, 0xA0	; 160
    146c:	b0 e4       	ldi	r27, 0x40	; 64
    146e:	8b 87       	std	Y+11, r24	; 0x0b
    1470:	9c 87       	std	Y+12, r25	; 0x0c
    1472:	ad 87       	std	Y+13, r26	; 0x0d
    1474:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1476:	6b 85       	ldd	r22, Y+11	; 0x0b
    1478:	7c 85       	ldd	r23, Y+12	; 0x0c
    147a:	8d 85       	ldd	r24, Y+13	; 0x0d
    147c:	9e 85       	ldd	r25, Y+14	; 0x0e
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	4a e7       	ldi	r20, 0x7A	; 122
    1484:	53 e4       	ldi	r21, 0x43	; 67
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8f 83       	std	Y+7, r24	; 0x07
    1490:	98 87       	std	Y+8, r25	; 0x08
    1492:	a9 87       	std	Y+9, r26	; 0x09
    1494:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1496:	6f 81       	ldd	r22, Y+7	; 0x07
    1498:	78 85       	ldd	r23, Y+8	; 0x08
    149a:	89 85       	ldd	r24, Y+9	; 0x09
    149c:	9a 85       	ldd	r25, Y+10	; 0x0a
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <KPAD_GetKeyPressed+0xaa>
		__ticks = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	3f c0       	rjmp	.+126    	; 0x1536 <KPAD_GetKeyPressed+0x128>
	else if (__tmp > 65535)
    14b8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ba:	78 85       	ldd	r23, Y+8	; 0x08
    14bc:	89 85       	ldd	r24, Y+9	; 0x09
    14be:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	3f ef       	ldi	r19, 0xFF	; 255
    14c4:	4f e7       	ldi	r20, 0x7F	; 127
    14c6:	57 e4       	ldi	r21, 0x47	; 71
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	4c f5       	brge	.+82     	; 0x1522 <KPAD_GetKeyPressed+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e2       	ldi	r20, 0x20	; 32
    14de:	51 e4       	ldi	r21, 0x41	; 65
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	9e 83       	std	Y+6, r25	; 0x06
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <KPAD_GetKeyPressed+0x10a>
    14fa:	89 e1       	ldi	r24, 0x19	; 25
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9c 83       	std	Y+4, r25	; 0x04
    1500:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <KPAD_GetKeyPressed+0xf8>
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f7       	brne	.-38     	; 0x14fa <KPAD_GetKeyPressed+0xec>
    1520:	14 c0       	rjmp	.+40     	; 0x154a <KPAD_GetKeyPressed+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1522:	6f 81       	ldd	r22, Y+7	; 0x07
    1524:	78 85       	ldd	r23, Y+8	; 0x08
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <KPAD_GetKeyPressed+0x134>
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5);
			if(btn == 0)
    154a:	8a 89       	ldd	r24, Y+18	; 0x12
    154c:	88 23       	and	r24, r24
    154e:	99 f4       	brne	.+38     	; 0x1576 <KPAD_GetKeyPressed+0x168>
			{
				res = KPAD_matrix[i][j];
    1550:	88 89       	ldd	r24, Y+16	; 0x10
    1552:	48 2f       	mov	r20, r24
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	8f 85       	ldd	r24, Y+15	; 0x0f
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	ca 01       	movw	r24, r20
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	82 0f       	add	r24, r18
    1568:	93 1f       	adc	r25, r19
    156a:	fc 01       	movw	r30, r24
    156c:	e8 59       	subi	r30, 0x98	; 152
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	80 81       	ld	r24, Z
    1572:	89 8b       	std	Y+17, r24	; 0x11
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <KPAD_GetKeyPressed+0x176>
{
	uint8_t res = 0xff;
	for(uint8_t i = 0 ; i<4 ; i++)
	{
		DIO_SetPinValue(KPAD_COL_PORT, col_arr[i], LOW);
		for(uint8_t j = 0 ; j< 4 ; j++)
    1576:	8f 85       	ldd	r24, Y+15	; 0x0f
    1578:	8f 5f       	subi	r24, 0xFF	; 255
    157a:	8f 87       	std	Y+15, r24	; 0x0f
    157c:	8f 85       	ldd	r24, Y+15	; 0x0f
    157e:	84 30       	cpi	r24, 0x04	; 4
    1580:	08 f4       	brcc	.+2      	; 0x1584 <KPAD_GetKeyPressed+0x176>
    1582:	61 cf       	rjmp	.-318    	; 0x1446 <KPAD_GetKeyPressed+0x38>
			}
//			if (value == 0 )
//			res = KPAD_matrix[i][j];
//			break
		}
		DIO_SetPinValue(KPAD_COL_PORT, col_arr[i], HIGH);
    1584:	88 89       	ldd	r24, Y+16	; 0x10
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	fc 01       	movw	r30, r24
    158c:	e8 58       	subi	r30, 0x88	; 136
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	90 81       	ld	r25, Z
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	69 2f       	mov	r22, r25
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>
}

uint8_t KPAD_GetKeyPressed(void)
{
	uint8_t res = 0xff;
	for(uint8_t i = 0 ; i<4 ; i++)
    159c:	88 89       	ldd	r24, Y+16	; 0x10
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	88 8b       	std	Y+16, r24	; 0x10
    15a2:	88 89       	ldd	r24, Y+16	; 0x10
    15a4:	84 30       	cpi	r24, 0x04	; 4
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <KPAD_GetKeyPressed+0x19c>
    15a8:	40 cf       	rjmp	.-384    	; 0x142a <KPAD_GetKeyPressed+0x1c>
//			break
		}
		DIO_SetPinValue(KPAD_COL_PORT, col_arr[i], HIGH);
//
	}
	return res;
    15aa:	89 89       	ldd	r24, Y+17	; 0x11
}
    15ac:	62 96       	adiw	r28, 0x12	; 18
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <LCD_Init>:
#include "Dio.h"
#include "Lcd.h"
#include "Lcd_config.h"

void LCD_Init(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	2e 97       	sbiw	r28, 0x0e	; 14
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
	// Set direction of LCD pins
	DIO_SetPortDirection(LCD_DATA_PORT, 0xff);
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	6f ef       	ldi	r22, 0xFF	; 255
    15d6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 e2       	ldi	r26, 0x20	; 32
    15fe:	b2 e4       	ldi	r27, 0x42	; 66
    1600:	8b 87       	std	Y+11, r24	; 0x0b
    1602:	9c 87       	std	Y+12, r25	; 0x0c
    1604:	ad 87       	std	Y+13, r26	; 0x0d
    1606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1608:	6b 85       	ldd	r22, Y+11	; 0x0b
    160a:	7c 85       	ldd	r23, Y+12	; 0x0c
    160c:	8d 85       	ldd	r24, Y+13	; 0x0d
    160e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a e7       	ldi	r20, 0x7A	; 122
    1616:	55 e4       	ldi	r21, 0x45	; 69
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8f 83       	std	Y+7, r24	; 0x07
    1622:	98 87       	std	Y+8, r25	; 0x08
    1624:	a9 87       	std	Y+9, r26	; 0x09
    1626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <LCD_Init+0x8c>
		__ticks = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	3f c0       	rjmp	.+126    	; 0x16c8 <LCD_Init+0x10a>
	else if (__tmp > 65535)
    164a:	6f 81       	ldd	r22, Y+7	; 0x07
    164c:	78 85       	ldd	r23, Y+8	; 0x08
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165e:	18 16       	cp	r1, r24
    1660:	4c f5       	brge	.+82     	; 0x16b4 <LCD_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1662:	6b 85       	ldd	r22, Y+11	; 0x0b
    1664:	7c 85       	ldd	r23, Y+12	; 0x0c
    1666:	8d 85       	ldd	r24, Y+13	; 0x0d
    1668:	9e 85       	ldd	r25, Y+14	; 0x0e
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <LCD_Init+0xec>
    168c:	80 e9       	ldi	r24, 0x90	; 144
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	8b 83       	std	Y+3, r24	; 0x03
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_Init+0xda>
    169c:	9c 83       	std	Y+4, r25	; 0x04
    169e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f7       	brne	.-38     	; 0x168c <LCD_Init+0xce>
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <LCD_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <LCD_Init+0x116>
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 30ms
	_delay_ms(40);

	// Send function set instruction
	// 0b00111000
	LCD_SendInst(0b00111000);
    16dc:	88 e3       	ldi	r24, 0x38	; 56
    16de:	0e 94 1e 0c 	call	0x183c	; 0x183c <LCD_SendInst>

	// Send on/off instruction
	// 0b00001100
	LCD_SendInst(0b00001100);
    16e2:	8c e0       	ldi	r24, 0x0C	; 12
    16e4:	0e 94 1e 0c 	call	0x183c	; 0x183c <LCD_SendInst>

	// Clear display
	LCD_SendInst(1);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	0e 94 1e 0c 	call	0x183c	; 0x183c <LCD_SendInst>

	// Send entry mode

}
    16ee:	2e 96       	adiw	r28, 0x0e	; 14
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <LCD_SendData>:

void LCD_SendData(uint8_t data)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	2f 97       	sbiw	r28, 0x0f	; 15
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	8f 87       	std	Y+15, r24	; 0x0f
	// Send data on data port
	DIO_SetPortValue(LCD_DATA_PORT, data);
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	6f 85       	ldd	r22, Y+15	; 0x0f
    171a:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_SetPortValue>

	// Set RS to high
	DIO_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>

	// Clr RW to low
	DIO_SetPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>

	// Send enable pulse
	DIO_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	62 e0       	ldi	r22, 0x02	; 2
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a0 e2       	ldi	r26, 0x20	; 32
    1742:	b1 e4       	ldi	r27, 0x41	; 65
    1744:	8b 87       	std	Y+11, r24	; 0x0b
    1746:	9c 87       	std	Y+12, r25	; 0x0c
    1748:	ad 87       	std	Y+13, r26	; 0x0d
    174a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	6b 85       	ldd	r22, Y+11	; 0x0b
    174e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1750:	8d 85       	ldd	r24, Y+13	; 0x0d
    1752:	9e 85       	ldd	r25, Y+14	; 0x0e
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4a e7       	ldi	r20, 0x7A	; 122
    175a:	55 e4       	ldi	r21, 0x45	; 69
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	8f 83       	std	Y+7, r24	; 0x07
    1766:	98 87       	std	Y+8, r25	; 0x08
    1768:	a9 87       	std	Y+9, r26	; 0x09
    176a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1780:	88 23       	and	r24, r24
    1782:	2c f4       	brge	.+10     	; 0x178e <LCD_SendData+0x8e>
		__ticks = 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	3f c0       	rjmp	.+126    	; 0x180c <LCD_SendData+0x10c>
	else if (__tmp > 65535)
    178e:	6f 81       	ldd	r22, Y+7	; 0x07
    1790:	78 85       	ldd	r23, Y+8	; 0x08
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	4f e7       	ldi	r20, 0x7F	; 127
    179c:	57 e4       	ldi	r21, 0x47	; 71
    179e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	4c f5       	brge	.+82     	; 0x17f8 <LCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <LCD_SendData+0xee>
    17d0:	80 e9       	ldi	r24, 0x90	; 144
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	8b 83       	std	Y+3, r24	; 0x03
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <LCD_SendData+0xdc>
    17e0:	9c 83       	std	Y+4, r25	; 0x04
    17e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9e 83       	std	Y+6, r25	; 0x06
    17ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <LCD_SendData+0xd0>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <LCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	9a 83       	std	Y+2, r25	; 0x02
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <LCD_SendData+0x118>
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	62 e0       	ldi	r22, 0x02	; 2
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>

}
    182a:	2f 96       	adiw	r28, 0x0f	; 15
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <LCD_SendInst>:

void LCD_SendInst(uint8_t inst)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	2f 97       	sbiw	r28, 0x0f	; 15
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	8f 87       	std	Y+15, r24	; 0x0f
	// Send instruction on data port
	DIO_SetPortValue(LCD_DATA_PORT, inst);
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	6f 85       	ldd	r22, Y+15	; 0x0f
    1856:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_SetPortValue>

	// Set RS to high
	DIO_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>

	// Clr RW to low
	DIO_SetPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>

	// Send enable pulse
	DIO_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e2       	ldi	r26, 0x20	; 32
    187e:	b1 e4       	ldi	r27, 0x41	; 65
    1880:	8b 87       	std	Y+11, r24	; 0x0b
    1882:	9c 87       	std	Y+12, r25	; 0x0c
    1884:	ad 87       	std	Y+13, r26	; 0x0d
    1886:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1888:	6b 85       	ldd	r22, Y+11	; 0x0b
    188a:	7c 85       	ldd	r23, Y+12	; 0x0c
    188c:	8d 85       	ldd	r24, Y+13	; 0x0d
    188e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a e7       	ldi	r20, 0x7A	; 122
    1896:	55 e4       	ldi	r21, 0x45	; 69
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8f 83       	std	Y+7, r24	; 0x07
    18a2:	98 87       	std	Y+8, r25	; 0x08
    18a4:	a9 87       	std	Y+9, r26	; 0x09
    18a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a8:	6f 81       	ldd	r22, Y+7	; 0x07
    18aa:	78 85       	ldd	r23, Y+8	; 0x08
    18ac:	89 85       	ldd	r24, Y+9	; 0x09
    18ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e8       	ldi	r20, 0x80	; 128
    18b6:	5f e3       	ldi	r21, 0x3F	; 63
    18b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18bc:	88 23       	and	r24, r24
    18be:	2c f4       	brge	.+10     	; 0x18ca <LCD_SendInst+0x8e>
		__ticks = 1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9e 83       	std	Y+6, r25	; 0x06
    18c6:	8d 83       	std	Y+5, r24	; 0x05
    18c8:	3f c0       	rjmp	.+126    	; 0x1948 <LCD_SendInst+0x10c>
	else if (__tmp > 65535)
    18ca:	6f 81       	ldd	r22, Y+7	; 0x07
    18cc:	78 85       	ldd	r23, Y+8	; 0x08
    18ce:	89 85       	ldd	r24, Y+9	; 0x09
    18d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	3f ef       	ldi	r19, 0xFF	; 255
    18d6:	4f e7       	ldi	r20, 0x7F	; 127
    18d8:	57 e4       	ldi	r21, 0x47	; 71
    18da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18de:	18 16       	cp	r1, r24
    18e0:	4c f5       	brge	.+82     	; 0x1934 <LCD_SendInst+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	51 e4       	ldi	r21, 0x41	; 65
    18f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	0f c0       	rjmp	.+30     	; 0x192a <LCD_SendInst+0xee>
    190c:	80 e9       	ldi	r24, 0x90	; 144
    190e:	91 e0       	ldi	r25, 0x01	; 1
    1910:	9c 83       	std	Y+4, r25	; 0x04
    1912:	8b 83       	std	Y+3, r24	; 0x03
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_SendInst+0xdc>
    191c:	9c 83       	std	Y+4, r25	; 0x04
    191e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	69 f7       	brne	.-38     	; 0x190c <LCD_SendInst+0xd0>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <LCD_SendInst+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	9a 85       	ldd	r25, Y+10	; 0x0a
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD_SendInst+0x118>
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	62 e0       	ldi	r22, 0x02	; 2
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_SetPinValue>
}
    1966:	2f 96       	adiw	r28, 0x0f	; 15
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <LCD_SendStr>:

void LCD_SendStr(const uint8_t* str)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	00 d0       	rcall	.+0      	; 0x197e <LCD_SendStr+0x6>
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	0b c0       	rjmp	.+22     	; 0x199e <LCD_SendStr+0x26>
	while(*str != '\0')
	{
		LCD_SendData(*str++);
    1988:	e9 81       	ldd	r30, Y+1	; 0x01
    198a:	fa 81       	ldd	r31, Y+2	; 0x02
    198c:	20 81       	ld	r18, Z
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	82 2f       	mov	r24, r18
    199a:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
	DIO_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
}

void LCD_SendStr(const uint8_t* str)
{
	while(*str != '\0')
    199e:	e9 81       	ldd	r30, Y+1	; 0x01
    19a0:	fa 81       	ldd	r31, Y+2	; 0x02
    19a2:	80 81       	ld	r24, Z
    19a4:	88 23       	and	r24, r24
    19a6:	81 f7       	brne	.-32     	; 0x1988 <LCD_SendStr+0x10>
	{
		LCD_SendData(*str++);
	}
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <LCD_GoTo>:

void LCD_GoTo(uint8_t x, uint8_t y)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <LCD_GoTo+0x6>
    19b8:	0f 92       	push	r0
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	8a 83       	std	Y+2, r24	; 0x02
    19c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t address = x + y*0x40;
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	00 24       	eor	r0, r0
    19ca:	96 95       	lsr	r25
    19cc:	87 95       	ror	r24
    19ce:	07 94       	ror	r0
    19d0:	96 95       	lsr	r25
    19d2:	87 95       	ror	r24
    19d4:	07 94       	ror	r0
    19d6:	98 2f       	mov	r25, r24
    19d8:	80 2d       	mov	r24, r0
    19da:	98 2f       	mov	r25, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	89 0f       	add	r24, r25
    19e0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(address, 7);
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	80 68       	ori	r24, 0x80	; 128
    19e6:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendInst(address);
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	0e 94 1e 0c 	call	0x183c	; 0x183c <LCD_SendInst>
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <LCD_SendNumber>:

void LCD_SendNumber(uint16_t number)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <LCD_SendNumber+0x6>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <LCD_SendNumber+0x8>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
//		case 9: LCD_SendData('9'); break;
//		}
//		num = num/10;
//	}

	switch (number)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	91 05       	cpc	r25, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <LCD_SendNumber+0x24>
    1a1c:	4a c0       	rjmp	.+148    	; 0x1ab2 <LCD_SendNumber+0xb8>
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	85 30       	cpi	r24, 0x05	; 5
    1a24:	91 05       	cpc	r25, r1
    1a26:	a8 f4       	brcc	.+42     	; 0x1a52 <LCD_SendNumber+0x58>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	91 05       	cpc	r25, r1
    1a30:	a1 f1       	breq	.+104    	; 0x1a9a <LCD_SendNumber+0xa0>
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	91 05       	cpc	r25, r1
    1a3a:	58 f1       	brcs	.+86     	; 0x1a92 <LCD_SendNumber+0x98>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	82 30       	cpi	r24, 0x02	; 2
    1a42:	91 05       	cpc	r25, r1
    1a44:	71 f1       	breq	.+92     	; 0x1aa2 <LCD_SendNumber+0xa8>
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	69 f1       	breq	.+90     	; 0x1aaa <LCD_SendNumber+0xb0>
    1a50:	47 c0       	rjmp	.+142    	; 0x1ae0 <LCD_SendNumber+0xe6>
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	87 30       	cpi	r24, 0x07	; 7
    1a58:	91 05       	cpc	r25, r1
    1a5a:	b9 f1       	breq	.+110    	; 0x1aca <LCD_SendNumber+0xd0>
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	88 30       	cpi	r24, 0x08	; 8
    1a62:	91 05       	cpc	r25, r1
    1a64:	58 f4       	brcc	.+22     	; 0x1a7c <LCD_SendNumber+0x82>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	85 30       	cpi	r24, 0x05	; 5
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	29 f1       	breq	.+74     	; 0x1aba <LCD_SendNumber+0xc0>
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	86 30       	cpi	r24, 0x06	; 6
    1a76:	91 05       	cpc	r25, r1
    1a78:	21 f1       	breq	.+72     	; 0x1ac2 <LCD_SendNumber+0xc8>
    1a7a:	32 c0       	rjmp	.+100    	; 0x1ae0 <LCD_SendNumber+0xe6>
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	88 30       	cpi	r24, 0x08	; 8
    1a82:	91 05       	cpc	r25, r1
    1a84:	31 f1       	breq	.+76     	; 0x1ad2 <LCD_SendNumber+0xd8>
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	89 30       	cpi	r24, 0x09	; 9
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	29 f1       	breq	.+74     	; 0x1ada <LCD_SendNumber+0xe0>
    1a90:	27 c0       	rjmp	.+78     	; 0x1ae0 <LCD_SendNumber+0xe6>
	{
	case 0: LCD_SendData('0'); break;
    1a92:	80 e3       	ldi	r24, 0x30	; 48
    1a94:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1a98:	23 c0       	rjmp	.+70     	; 0x1ae0 <LCD_SendNumber+0xe6>
	case 1: LCD_SendData('1'); break;
    1a9a:	81 e3       	ldi	r24, 0x31	; 49
    1a9c:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1aa0:	1f c0       	rjmp	.+62     	; 0x1ae0 <LCD_SendNumber+0xe6>
	case 2: LCD_SendData('2'); break;
    1aa2:	82 e3       	ldi	r24, 0x32	; 50
    1aa4:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1aa8:	1b c0       	rjmp	.+54     	; 0x1ae0 <LCD_SendNumber+0xe6>
	case 3: LCD_SendData('3'); break;
    1aaa:	83 e3       	ldi	r24, 0x33	; 51
    1aac:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1ab0:	17 c0       	rjmp	.+46     	; 0x1ae0 <LCD_SendNumber+0xe6>
	case 4: LCD_SendData('4'); break;
    1ab2:	84 e3       	ldi	r24, 0x34	; 52
    1ab4:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1ab8:	13 c0       	rjmp	.+38     	; 0x1ae0 <LCD_SendNumber+0xe6>
	case 5: LCD_SendData('5'); break;
    1aba:	85 e3       	ldi	r24, 0x35	; 53
    1abc:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <LCD_SendNumber+0xe6>
	case 6: LCD_SendData('6'); break;
    1ac2:	86 e3       	ldi	r24, 0x36	; 54
    1ac4:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1ac8:	0b c0       	rjmp	.+22     	; 0x1ae0 <LCD_SendNumber+0xe6>
	case 7: LCD_SendData('7'); break;
    1aca:	87 e3       	ldi	r24, 0x37	; 55
    1acc:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <LCD_SendNumber+0xe6>
	case 8: LCD_SendData('8'); break;
    1ad2:	88 e3       	ldi	r24, 0x38	; 56
    1ad4:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1ad8:	03 c0       	rjmp	.+6      	; 0x1ae0 <LCD_SendNumber+0xe6>
	case 9: LCD_SendData('9'); break;
    1ada:	89 e3       	ldi	r24, 0x39	; 57
    1adc:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
	}
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <main>:
//	{
//		operator = input;
//	}
//}
int main()
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	61 97       	sbiw	r28, 0x11	; 17
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    1b02:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_Init>
	KPAD_Init();
    1b06:	0e 94 c7 09 	call	0x138e	; 0x138e <KPAD_Init>
	while(1)
	{
		uint8_t pressed_key = KPAD_GetKeyPressed();
    1b0a:	0e 94 07 0a 	call	0x140e	; 0x140e <KPAD_GetKeyPressed>
    1b0e:	8f 87       	std	Y+15, r24	; 0x0f
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e2       	ldi	r26, 0x20	; 32
    1b16:	b1 e4       	ldi	r27, 0x41	; 65
    1b18:	8b 87       	std	Y+11, r24	; 0x0b
    1b1a:	9c 87       	std	Y+12, r25	; 0x0c
    1b1c:	ad 87       	std	Y+13, r26	; 0x0d
    1b1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a e7       	ldi	r20, 0x7A	; 122
    1b2e:	53 e4       	ldi	r21, 0x43	; 67
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8f 83       	std	Y+7, r24	; 0x07
    1b3a:	98 87       	std	Y+8, r25	; 0x08
    1b3c:	a9 87       	std	Y+9, r26	; 0x09
    1b3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <main+0x74>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	3f c0       	rjmp	.+126    	; 0x1be0 <main+0xf2>
	else if (__tmp > 65535)
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	57 e4       	ldi	r21, 0x47	; 71
    1b72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	4c f5       	brge	.+82     	; 0x1bcc <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e2       	ldi	r20, 0x20	; 32
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <main+0xd4>
    1ba4:	89 e1       	ldi	r24, 0x19	; 25
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <main+0xc2>
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <main+0xb6>
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <main+0xfe>
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if(pressed_key != 0xff)
    1bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <main+0x10e>
    1bfa:	87 cf       	rjmp	.-242    	; 0x1b0a <main+0x1c>
		{
			if(pressed_key == '=')
    1bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfe:	8d 33       	cpi	r24, 0x3D	; 61
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <main+0x116>
    1c02:	4e c0       	rjmp	.+156    	; 0x1ca0 <main+0x1b2>
			{
				LCD_SendData('=');
    1c04:	8d e3       	ldi	r24, 0x3D	; 61
    1c06:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
				switch(op)
    1c0a:	80 91 82 00 	lds	r24, 0x0082
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	39 8b       	std	Y+17, r19	; 0x11
    1c14:	28 8b       	std	Y+16, r18	; 0x10
    1c16:	88 89       	ldd	r24, Y+16	; 0x10
    1c18:	99 89       	ldd	r25, Y+17	; 0x11
    1c1a:	8f 32       	cpi	r24, 0x2F	; 47
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	a9 f1       	breq	.+106    	; 0x1c8a <main+0x19c>
    1c20:	28 89       	ldd	r18, Y+16	; 0x10
    1c22:	39 89       	ldd	r19, Y+17	; 0x11
    1c24:	20 33       	cpi	r18, 0x30	; 48
    1c26:	31 05       	cpc	r19, r1
    1c28:	5c f4       	brge	.+22     	; 0x1c40 <main+0x152>
    1c2a:	88 89       	ldd	r24, Y+16	; 0x10
    1c2c:	99 89       	ldd	r25, Y+17	; 0x11
    1c2e:	8b 32       	cpi	r24, 0x2B	; 43
    1c30:	91 05       	cpc	r25, r1
    1c32:	61 f0       	breq	.+24     	; 0x1c4c <main+0x15e>
    1c34:	28 89       	ldd	r18, Y+16	; 0x10
    1c36:	39 89       	ldd	r19, Y+17	; 0x11
    1c38:	2d 32       	cpi	r18, 0x2D	; 45
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	81 f0       	breq	.+32     	; 0x1c5e <main+0x170>
    1c3e:	65 cf       	rjmp	.-310    	; 0x1b0a <main+0x1c>
    1c40:	88 89       	ldd	r24, Y+16	; 0x10
    1c42:	99 89       	ldd	r25, Y+17	; 0x11
    1c44:	88 37       	cpi	r24, 0x78	; 120
    1c46:	91 05       	cpc	r25, r1
    1c48:	a9 f0       	breq	.+42     	; 0x1c74 <main+0x186>
    1c4a:	5f cf       	rjmp	.-322    	; 0x1b0a <main+0x1c>
				{
				case '+': LCD_SendData( (op1 + op2) + '0'); break;
    1c4c:	90 91 80 00 	lds	r25, 0x0080
    1c50:	80 91 81 00 	lds	r24, 0x0081
    1c54:	89 0f       	add	r24, r25
    1c56:	80 5d       	subi	r24, 0xD0	; 208
    1c58:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1c5c:	56 cf       	rjmp	.-340    	; 0x1b0a <main+0x1c>
				case '-': LCD_SendData( (op1 - op2) + '0'); break;
    1c5e:	90 91 80 00 	lds	r25, 0x0080
    1c62:	80 91 81 00 	lds	r24, 0x0081
    1c66:	29 2f       	mov	r18, r25
    1c68:	28 1b       	sub	r18, r24
    1c6a:	82 2f       	mov	r24, r18
    1c6c:	80 5d       	subi	r24, 0xD0	; 208
    1c6e:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1c72:	4b cf       	rjmp	.-362    	; 0x1b0a <main+0x1c>
				case 'x': LCD_SendData( (op1 * op2) + '0'); break;
    1c74:	90 91 80 00 	lds	r25, 0x0080
    1c78:	80 91 81 00 	lds	r24, 0x0081
    1c7c:	98 9f       	mul	r25, r24
    1c7e:	80 2d       	mov	r24, r0
    1c80:	11 24       	eor	r1, r1
    1c82:	80 5d       	subi	r24, 0xD0	; 208
    1c84:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1c88:	40 cf       	rjmp	.-384    	; 0x1b0a <main+0x1c>
				case '/': LCD_SendData( (op1 / op2) + '0'); break;
    1c8a:	80 91 80 00 	lds	r24, 0x0080
    1c8e:	90 91 81 00 	lds	r25, 0x0081
    1c92:	69 2f       	mov	r22, r25
    1c94:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__udivmodqi4>
    1c98:	80 5d       	subi	r24, 0xD0	; 208
    1c9a:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
    1c9e:	35 cf       	rjmp	.-406    	; 0x1b0a <main+0x1c>
				}
			}
			else if(pressed_key >= '0' && pressed_key <= '9')
    1ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca2:	80 33       	cpi	r24, 0x30	; 48
    1ca4:	a0 f0       	brcs	.+40     	; 0x1cce <main+0x1e0>
    1ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca8:	8a 33       	cpi	r24, 0x3A	; 58
    1caa:	88 f4       	brcc	.+34     	; 0x1cce <main+0x1e0>
			{
				LCD_SendData(pressed_key);
    1cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cae:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
				if(op1 == 0xff)
    1cb2:	80 91 80 00 	lds	r24, 0x0080
    1cb6:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb8:	29 f4       	brne	.+10     	; 0x1cc4 <main+0x1d6>
				{
					op1 = pressed_key - '0';
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	80 53       	subi	r24, 0x30	; 48
    1cbe:	80 93 80 00 	sts	0x0080, r24
    1cc2:	23 cf       	rjmp	.-442    	; 0x1b0a <main+0x1c>
				}
				else
				{
					op2 = pressed_key - '0';
    1cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc6:	80 53       	subi	r24, 0x30	; 48
    1cc8:	80 93 81 00 	sts	0x0081, r24
    1ccc:	1e cf       	rjmp	.-452    	; 0x1b0a <main+0x1c>
				}
			}
			else if(pressed_key == 'C')
    1cce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd0:	83 34       	cpi	r24, 0x43	; 67
    1cd2:	69 f4       	brne	.+26     	; 0x1cee <main+0x200>
			{
				LCD_SendInst(1);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	0e 94 1e 0c 	call	0x183c	; 0x183c <LCD_SendInst>
				op1 = 0xff;
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	80 93 80 00 	sts	0x0080, r24
				op2 = 0xff;
    1ce0:	8f ef       	ldi	r24, 0xFF	; 255
    1ce2:	80 93 81 00 	sts	0x0081, r24
				op = 0xff;
    1ce6:	8f ef       	ldi	r24, 0xFF	; 255
    1ce8:	80 93 82 00 	sts	0x0082, r24
    1cec:	0e cf       	rjmp	.-484    	; 0x1b0a <main+0x1c>
			}
			else
			{
				LCD_SendData(pressed_key);
    1cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf0:	0e 94 80 0b 	call	0x1700	; 0x1700 <LCD_SendData>
				op = pressed_key;
    1cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf6:	80 93 82 00 	sts	0x0082, r24
    1cfa:	07 cf       	rjmp	.-498    	; 0x1b0a <main+0x1c>

00001cfc <__udivmodqi4>:
    1cfc:	99 1b       	sub	r25, r25
    1cfe:	79 e0       	ldi	r23, 0x09	; 9
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <__udivmodqi4_ep>

00001d02 <__udivmodqi4_loop>:
    1d02:	99 1f       	adc	r25, r25
    1d04:	96 17       	cp	r25, r22
    1d06:	08 f0       	brcs	.+2      	; 0x1d0a <__udivmodqi4_ep>
    1d08:	96 1b       	sub	r25, r22

00001d0a <__udivmodqi4_ep>:
    1d0a:	88 1f       	adc	r24, r24
    1d0c:	7a 95       	dec	r23
    1d0e:	c9 f7       	brne	.-14     	; 0x1d02 <__udivmodqi4_loop>
    1d10:	80 95       	com	r24
    1d12:	08 95       	ret

00001d14 <__prologue_saves__>:
    1d14:	2f 92       	push	r2
    1d16:	3f 92       	push	r3
    1d18:	4f 92       	push	r4
    1d1a:	5f 92       	push	r5
    1d1c:	6f 92       	push	r6
    1d1e:	7f 92       	push	r7
    1d20:	8f 92       	push	r8
    1d22:	9f 92       	push	r9
    1d24:	af 92       	push	r10
    1d26:	bf 92       	push	r11
    1d28:	cf 92       	push	r12
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	ca 1b       	sub	r28, r26
    1d3e:	db 0b       	sbc	r29, r27
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	09 94       	ijmp

00001d4c <__epilogue_restores__>:
    1d4c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d4e:	39 88       	ldd	r3, Y+17	; 0x11
    1d50:	48 88       	ldd	r4, Y+16	; 0x10
    1d52:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d54:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d56:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d58:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d5e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d60:	c8 84       	ldd	r12, Y+8	; 0x08
    1d62:	df 80       	ldd	r13, Y+7	; 0x07
    1d64:	ee 80       	ldd	r14, Y+6	; 0x06
    1d66:	fd 80       	ldd	r15, Y+5	; 0x05
    1d68:	0c 81       	ldd	r16, Y+4	; 0x04
    1d6a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d6c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d6e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d70:	ce 0f       	add	r28, r30
    1d72:	d1 1d       	adc	r29, r1
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	ed 01       	movw	r28, r26
    1d80:	08 95       	ret

00001d82 <_exit>:
    1d82:	f8 94       	cli

00001d84 <__stop_program>:
    1d84:	ff cf       	rjmp	.-2      	; 0x1d84 <__stop_program>
